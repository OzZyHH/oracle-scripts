#!/bin/bash
# Fred Denis -- May 2019 -- http://unknowndba.blogspot.com -- fred.denis3@gmail.com
#
# Shows a status of the cell disks and grid disks across all the nodes of an Exadata, see usage function (option -h) for more information
#
# The current script version is 20190502
#
# History :
#
# 20190502 - Fred Denis - Initial release
#
# Variables
#
        NB_PER_LINE=$(bc <<< "`tput cols`/30")                                  # Number of DG to show per line,  can be changed with -n option
                TMP=/tmp/cell-status$$.tmp                                      # A tempfile
               TMP2=/tmp/cell-status2$$.tmp                                     # A tempfile
          DBMACHINE=/opt/oracle.SupportTools/onecommand/databasemachine.xml     # File where we should find the Exadata model
     SHOW_BAD_DISKS="NO"                                                        # Shows the details of the bad disks (-v option)

#
# An usage function
#
usage()
{
printf "\n\033[1;37m%-8s\033[m\n" "NAME"                ;
cat << END
        `basename $0` -  Shows a status of the cell disks and grid disks across all the nodes of an Exadata.
END
printf "\n\033[1;37m%-8s\033[m\n" "SYNOPSIS"            ;
cat << END
        $0 [-v] [-o] [-f] [-h]
END
printf "\n\033[1;37m%-8s\033[m\n" "DESCRIPTION"         ;
cat << END
        - `basename $0` has to be run with a user who has SSH equivalence on the cell servers (root)
        - `basename $0` does not rely on any cell_group file to connect on a list of cells but used ibhosts to build
           the list of the cell servers to connect to
END
printf "\n\033[1;37m%-8s\033[m\n" "OPTIONS"             ;
cat << END
        -v      Shows the details of the bad disks (with error or bad status)
        -o      Save the output of the dcli commands in a file (`basename $0` -o outputfile.log)
        -f      Use a file generated by the -o option as input (`basename $0` -f outputfile.log)
        -h      Shows this help

END
exit 123
}

#
# Options
#
while getopts "ho:f:n:v" OPT; do
        case ${OPT} in
        o)           OUT=${OPTARG}                                                              ;;
        f)            IN=${OPTARG}                                                              ;;
        n)   NB_PER_LINE=${OPTARG}                                                              ;;
        v)SHOW_BAD_DISKS="YES"                                                                  ;;
        h)         usage                                                                        ;;
        \?)        echo "Invalid option: -$OPTARG" >&2; usage                                   ;;
        esac
done

if [[ -z ${IN} ]]       # No input file specified, we dynamically find the info from the cells
then
        ibhosts | sed s'/"//' | grep cel | awk '{print $6}' | sort > ${TMP2}    # list of cells
        dcli -g ${TMP2} -l root "echo celldisk; cellcli -e list celldisk attributes name,status,size,errorcount,disktype; echo BREAK; echo griddisk; cellcli -e list griddisk attributes asmDiskGroupName,name,asmmodestatus,asmdeactivationoutcome,size,errorcount,disktype; echo BREAK_CELL" > ${TMP}
        IN=${TMP}
fi
if [[ -n ${OUT} ]]      # Output file specified, we save the cell infos in and we exit
then
        cp ${TMP} ${OUT}
        rm ${TMP}
        cat << END
        Output file ${OUT} has been successfully generated.
END
exit 456
fi
if [[ ! -f ${IN} ]]
then
        cat << !
        Cannot find the file ${IN}; cannot continue.
!
exit 123
fi

#
# Show the Exadata model if possible
#
printf "\n"
if [ -f ${DBMACHINE} ] && [ -r ${DBMACHINE} ]
then
        cat << !
                Cluster is a `grep -i MACHINETYPES ${DBMACHINE} | sed s'/\t*//' | sed -e s':</*MACHINETYPES>::g' -e s'/^ *//' -e s'/ *$//'`
!
else
        printf "\n"
fi

#
# Read the information from the cells and make nice tables
#
awk -v nb_per_line="$NB_PER_LINE" -v show_bad_disks="$SHOW_BAD_DISKS" 'BEGIN\
        {
          # Some colors
             COLOR_BEGIN =       "\033[1;"                      ;
               COLOR_END =       "\033[m"                       ;
                     RED =       "31m"                          ;
                   GREEN =       "32m"                          ;
                  YELLOW =       "33m"                          ;
                    BLUE =       "34m"                          ;
                    TEAL =       "36m"                          ;
                   WHITE =       "37m"                          ;
                  NORMAL =        "0m"                          ;
          BACK_LIGHTBLUE =      "104m"                          ;
          RED_BACKGROUND =       "41m"                          ;
        # Column size
                COL_CELL =      20                              ;
            COL_DISKTYPE =      26                              ;
                  COL_NB =      COL_DISKTYPE/3                  ;
        }
        #
        # A function to center the outputs with colors
        #
        function center( str, n, color, sep)
        {       right = int((n - length(str)) / 2)                                                                    ;
              left  = n - length(str) - right                                                                         ;
              return sprintf(COLOR_BEGIN color "%" left "s%s%" right "s" COLOR_END sep, "", str, "" )                 ;
        }
        #
        # A function that just print a "---" white line
        #
        function print_a_line(size)
        {
               if ( ! size)
               {       size = COL_DB+COL_VER+(COL_NODE*n)+COL_TYPE+n+3                  ;
               }
               printf("%s", COLOR_BEGIN WHITE)                                          ;
               for (k=1; k<=size; k++) {printf("%s", "-");}                             ;
               printf("%s", COLOR_END"\n")                                              ;
        }
        {       sub (":", "", $1)                                                       ;
                if ($2 == "celldisk")
                {
                        cell = $1                                                       ;
                        tab_cell[cell] = cell                                           ;
                        while (getline)
                        {
                                if ($2 == "BREAK")
                                {
                                        break                                           ;
                                }
                                if ($3 == "normal")
                                {
                                        tab_status[cell,$NF,$3]++                       ;       # With status = normal
                                } else {
                                        bad_cell_disks[$0] = $0                         ;       # Bad disks with status != normal
                                }
                                tab_err[cell,$NF]+=$(NF-1)                              ;       # Disks with errors
                                if ($(NF-1) > 0)
                                {       bad_cell_disks[$0] = $0                         ;       # Details to show with -v option
                                }
                                tab_nbdisks[cell,$NF]++                                 ;       # NB disks per distype
                                tab_disktype[$NF]=$NF                                   ;       # Disktypes
                        }
                }       # End if ($2 == "celldisk")
                if ($2 == "griddisk")
                {       cell = $1                                                       ;
                        while(getline)
                        {
                                if ($2 == "BREAK_CELL")
                                {
                                        break                                           ;
                                }
                                if ($3 != "UNUSED")                                             # Unused disks have no DG
                                {
                                        tab2_err[cell,$2]+=$7                           ;       # Grid disks with errors
                                        if ($7 > 0)
                                        {       bad_grid_disks[$0] = $0                 ;       # Details to show with -v option
                                        }
                                        tab2_nbdisks[cell,$2]++                         ;       # Nb disks per diskgroup
                                        tab2_dgs[$2]=$2                                 ;       # Diskgroups
                                        if (tolower($5) != "yes")                               # asmDeactivationOutcome
                                        {       tab2_deact[cell,$2]="no"                ;
                                                bad_grid_disks[$0] = $0                 ;       # Details to show with -v option
                                        }
                                        if ($4 == "ONLINE")
                                        {       tab2_status[cell,$2]++                  ;       # cell,DG
                                        } else {
                                                tab2_bad[cell,$2]++                     ;       # bad status disks
                                                bad_grid_disks[$0] = $0                 ;       # Details to show with -v option
                                        }
                                }
                        }
                }       # End if ($2 == "griddisk")

        }
        function print_blue_hyphen(size, sep)
        {
                printf ("%s", center("--", size, BLUE, sep))                            ;       # Just print a blue "--"
        }
        function print_red_cross(size, sep)
        {
                printf ("%s", center("xx", size, COLOR_STATUS, sep))                    ;       # Just print a red "xx"
        }
        function print_legend()
        {       # A legend behind the tables
                printf(COLOR_BEGIN BLUE " %-"3"s" COLOR_END, "--")                              ;
                printf(COLOR_BEGIN WHITE " %-"12"s |" COLOR_END, ": Unused disks")              ;
                printf(COLOR_BEGIN RED " %-"3"s" COLOR_END, "xx")                               ;
                printf(COLOR_BEGIN WHITE " %-"20"s |" COLOR_END, ": Not ONLINE disks")          ;
                printf(COLOR_BEGIN RED_BACKGROUND " %-"3"s" COLOR_END, "  ")                    ;
                printf(COLOR_BEGIN WHITE " %-"20"s" COLOR_END, ": asmDeactivationOutcome is NOT yes");
        }
        function print_griddisk_header(i)
        {
                printed=0                                                               ;
                printf("\n\n", "")                                                        ;
                printf ("%s", center("Grid Disks", COL_CELL, TEAL, "|"))                ;

                for (j=i; j<i+nb_per_line; j++)
                {
                        dg=dgs_sorted[j]                                                ;       # To ease the naming below

                        if (j > nb_dgs)         # Everything is printed so we stop even if line is not full
                        {       break                                                   ;
                        }
                        printf ("%s", center(dg, COL_DISKTYPE, WHITE, "|"))             ;
                }
                printf("\n")                                                            ;
                printf ("%s", center(" ", COL_CELL, WHITE, "|"))                        ;

                for (j=i; j<i+nb_per_line; j++)
                {
                        if (j > nb_dgs)         # Everything is printed so we stop even if line is not full
                        {       break                                                   ;
                        }
                        printf ("%s", center("Nb", COL_NB, WHITE, "|"))                 ;
                        printf ("%s", center("Online", COL_NB, WHITE, "|"))             ;
                        printf ("%s", center("Errors", COL_NB, WHITE, "|"))             ;
                        printed++                                                       ;
                }
                printf("\n")                                                            ;
                print_a_line(COL_CELL+COL_DISKTYPE*printed+printed+1)                   ;
        }
        END\
        {       # Sort the arrays
                nb_cells=asort(tab_cell, tab_cell_sorted)                               ;
                #
                # CELL DISKS
                #
                # Disk Types
                printf("\n", "")                                                        ;
                printf ("%s", center("Cell Disks", COL_CELL, TEAL, "|"))                ;
                for (disktype in tab_disktype)
                {
                        printf ("%s", center(disktype, COL_DISKTYPE, WHITE, "|"))       ;
                }
                printf("\n")                                                            ;
                printf ("%s", center(" ", COL_CELL, WHITE, "|"))                        ;
                for (disktype in tab_disktype)
                {
                        printf ("%s", center("Nb", COL_NB, WHITE, "|"))                 ;
                        printf ("%s", center("Normal", COL_NB, WHITE, "|"))             ;
                        printf ("%s", center("Errors", COL_NB, WHITE, "|"))             ;
                }
                printf("\n")                                                            ;
                print_a_line(COL_CELL+COL_DISKTYPE*length(tab_disktype)+length(tab_disktype)+1) ;

                for (x=1; x<=nb_cells; x++)
                {
                        cell=tab_cell_sorted[x]                                         ;
                        printf ("%s", center(cell, COL_CELL, WHITE, "|"))               ;
                        for (y in tab_status)
                        {       split(y,sep,SUBSEP)                                     ;
                                if (sep[1] == cell)
                                {       for (disktype in tab_disktype)
                                        {
                                                COLOR_ERROR=GREEN                       ;
                                                COLOR_STATUS=GREEN                      ;

                                                # Nb disks
                                                printf ("%s", center(tab_nbdisks[cell,disktype], COL_NB, WHITE, "|"))                   ;

                                                # Disks status
                                                if (tab_status[cell,disktype,sep[3]]<tab_nbdisks[cell,disktype]) { COLOR_STATUS=RED;}
                                                printf ("%s", center(tab_status[cell,disktype,sep[3]], COL_NB, COLOR_STATUS, "|"))      ;

                                                # Number of error
                                                if (tab_err[cell,disktype]>0)   { COLOR_ERROR=RED;      }
                                                printf ("%s", center(tab_err[cell,disktype], COL_NB, COLOR_ERROR, "|"))                 ;
                                        }
                                        break                                           ;
                                }
                        }
                        printf("\n")                                                    ;
                }
                print_a_line(COL_CELL+COL_DISKTYPE*length(tab_disktype)+length(tab_disktype)+1)                                         ;

                if (tolower(show_bad_disks) == "yes")
                {
                        if (length(bad_cell_disks) > 0)
                        {       a=asort(bad_cell_disks, bad_cell_disks_sorted)          ;
                                printf("%s", center("Failed Cell Disks details", COL_CELL, TEAL))      ;
                                printf("\n")                                                    ;
                                printf("%s", center("", COL_CELL, WHITE, "|"))      ;
                                printf("%s", center("Name", COL_CELL, WHITE, "|"))      ;
                                printf("%s", center("Status", COL_CELL, WHITE, "|"))      ;
                                printf("%s", center("Size", COL_CELL, WHITE, "|"))      ;
                                printf("%s", center("Nb Error", 10, WHITE, "|"))      ;
                                printf("%s", center("Disktype", COL_CELL, WHITE, "|"))      ;
                                printf("\n")                                                    ;
                                print_a_line(COL_CELL*5+10+6)                           ;
                                for (i=1; i<=a; i++)
                                {       split(bad_cell_disks_sorted[i], bad)            ;
                                        sub (":", "", bad[1])                           ;
                                        if (bad[3] != "normal") {COLOR_STATUS=RED; } else { COLOR_STATUS=NORMAL; }      # Status
                                        if (bad[5] > 0) {COLOR_ERROR=RED; } else { COLOR_ERROR=NORMAL; }        # Nb errors
                                        printf ("%s", center(bad[1], COL_CELL, NORMAL, "|"))      ;
                                        printf ("%s", center(bad[2], COL_CELL, NORMAL, "|"))      ;
                                        printf ("%s", center(bad[3], COL_CELL, COLOR_STATUS, "|"))      ;
                                        printf ("%s", center(bad[4], COL_CELL, NORMAL, "|"))      ;
                                        printf ("%s", center(bad[5], 10, COLOR_ERROR, "|"))      ;
                                        printf ("%s", center(bad[6], COL_CELL, NORMAL, "|"))      ;
                                        printf("\n")                                                    ;
                                }
                        }
                        print_a_line(COL_CELL*5+10+6)                           ;
                }

                #
                # GRID DISKS
                #
                nb_dgs=asort(tab2_dgs, dgs_sorted)                                      ;

                for (i=1; i<=nb_dgs; i+=nb_per_line)
                {
                        print_griddisk_header(i)                                        ;
                        for (x=1; x<=nb_cells; x++)
                        {
                                      cell=tab_cell_sorted[x]                           ;        # To ease the naming below
                                nb_printed=0    ;
                                printf ("%s", center(cell, COL_CELL, WHITE, "|"))       ;
                                for (k=i; k<i+nb_per_line; k++)
                                {
                                        if (k > nb_dgs)                                         # Everything is printed so we stop even if line is not full
                                        {       break                                   ;
                                        }
                                        dg=dgs_sorted[k]                                ;       # To ease the naming below

                                        if (tab2_deact[cell,dg])                                # asmdeactivationoutcome is NOT yes
                                        {
                                                     COLOR_ERROR=RED_BACKGROUND         ;
                                                    COLOR_STATUS=RED_BACKGROUND         ;
                                                COLOR_STATUS_BAD=RED_BACKGROUND         ;
                                                  COLOR_NB_DISKS=RED_BACKGROUND         ;
                                        } else {
                                                     COLOR_ERROR=GREEN                  ;
                                                    COLOR_STATUS=GREEN                  ;
                                                 COLOR_STATUS_BAD=RED                   ;
                                                   COLOR_NB_DISKS=WHITE                 ;
                                        }

                                        if (tab2_nbdisks[cell,dg])
                                        {       printf ("%s", center(tab2_nbdisks[cell,dg], COL_NB, COLOR_NB_DISKS, "|"))       ;      # NB disks
                                        } else {
                                                print_blue_hyphen(COL_NB, "|")          ;
                                        }

                                        if (tab2_status[cell,dg]<tab2_nbdisks[cell,dg]) { COLOR_STATUS=COLOR_STATUS_BAD;}
                                        if (tab2_bad[cell,dg] > 0)
                                        {       print_red_cross(COL_NB, "|")            ;
                                        } else {
                                                if (tab2_status[cell,dg])
                                                {       printf ("%s", center(tab2_status[cell,dg], COL_NB, COLOR_STATUS, "|"))  ; # Nb disks with ONLINE status
                                                } else {
                                                        print_blue_hyphen(COL_NB, "|")  ;
                                                }
                                        }

                                        if (tab2_err[cell,dg]>0)    { COLOR_ERROR=COLOR_STATUS_BAD;      }
                                        if (tab2_err[cell,dg] != "")
                                        {       printf ("%s", center(tab2_err[cell,dg], COL_NB, COLOR_ERROR, "|"))              ;     # NB errors
                                        } else {
                                                print_blue_hyphen(COL_NB, "|")          ;
                                        }
                                        nb_printed++                                    ;
                                }
                                printf("\n")                                            ;
                        }
                        print_a_line(COL_CELL+COL_DISKTYPE*nb_printed+nb_printed+1)     ;
                        print_legend()                                                  ;
                }       # End         for (i=1; i<=nb_dgs; i++)

        # Show bad grid disks
        if (tolower(show_bad_disks) == "yes")
        {       printf("\n\n")                                                          ;
                printf("%s", center("Failed Cell Disks details", COL_CELL, TEAL))       ;
                printf("\n")                                                            ;
                if (length(bad_grid_disks) > 0)
                {
                        a=asort(bad_grid_disks, bad_grid_disks_sorted)                  ;
                        printf("%-14s%-24s%12s%16s%6s%8s%6s%16s\n", "cell", "asmDGName", "name","status", "deactoutcome", "size", "error" ,"disktype" )       ;
                        for (i=1; i<=a; i++)
                        {
                                printf ("%s\n", bad_grid_disks_sorted[i])               ;
                        }
                }
                printf("\n")                                                            ;
        }
        printf("\n")                                                                    ;
        printf("\n")                                                                    ;
        }' ${IN}


#
# Delete tempfiles
#
for F in ${TMP} ${TMP2}
do
        if [[ -f ${F} ]]
        then
                rm -f ${F}
        fi
done

#****************************************************************#
#               E N D      O F       S O U R C E                *#
#****************************************************************#
